basePath: /
definitions:
  api-gateway_internal_models.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: Password123!
        type: string
    required:
    - email
    - password
    type: object
  api-gateway_internal_models.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      message:
        example: Login successful
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/api-gateway_internal_models.User'
    type: object
  api-gateway_internal_models.User:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: user@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        example: Doe
        type: string
      phone_number:
        example: "+1234567890"
        type: string
      push_notification_permission:
        example: true
        type: boolean
      role:
        example: user
        type: string
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Error message
        type: string
    type: object
  models.UserResponse:
    properties:
      message:
        example: User retrieved successfully
        type: string
      user:
        $ref: '#/definitions/api-gateway_internal_models.User'
    type: object
host: localhost:8080
info:
  contact: {}
  description: API Gateway for QAMQOR-VISION microservices
  title: QAMQOR-VISION API Gateway
  version: "1.0"
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api-gateway_internal_models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api-gateway_internal_models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User Login
      tags:
      - Authentication
  /api/v1/users/{id}:
    get:
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get User
      tags:
      - Users
  /api/v1/users/{id}/failed-attempts:
    get:
      description: Get failed login attempts for a specific user within a time window
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Start time in ISO format (e.g., 2023-01-01T00:00:00Z)
        in: query
        name: since
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Failed Login Attempts
      tags:
      - Users
  /api/v1/users/{id}/login-history:
    get:
      description: Get paginated login history for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - default: 10
        description: Number of records to return
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of records to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get User Login History
      tags:
      - Users
  /api/v1/users/{id}/recent-logins:
    get:
      description: Get recent login history for a specific user (last 10 logins)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get Recent Login History
      tags:
      - Users
  /api/v1/users/me:
    get:
      description: Get current user's profile information from JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Current User Profile
      tags:
      - Authentication
swagger: "2.0"
