{
	"info": {
		"_postman_id": "qamqor-vision-backend-api",
		"name": "Qamqor Vision Backend API",
		"description": "Complete API collection for Qamqor Vision Backend microservices architecture with JWT authentication and role-based authorization",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "qamqor-vision-backend"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Comprehensive Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check if all services (API Gateway, Auth Service, Database) are running and healthy"
					},
					"response": []
				}
			],
			"description": "Health check endpoints for monitoring service status"
		},
		{
			"name": "Authentication (Public)",
			"item": [
				{
					"name": "User Registration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"Password123!\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"phone_number\": \"+1234567890\",\n  \"push_notification_permission\": true,\n  \"role\": \"user\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						},
						"description": "Register a new user account. Role field is optional and defaults to 'user' if not provided. Valid roles: admin, user, manager, operator, analyst"
					},
					"response": []
				},
				{
					"name": "User Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"Password123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						},
						"description": "Login with email and password. Returns JWT access token (expires in 15 minutes)"
					},
					"response": []
				},
				{
					"name": "Forgot Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"forgot-password"
							]
						},
						"description": "Request password reset email"
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user@example.com\",\n  \"new_password\": \"NewPassword123!\",\n  \"token\": \"reset-token-from-email\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"reset-password"
							]
						},
						"description": "Reset password using token from email"
					},
					"response": []
				}
			],
			"description": "Public authentication endpoints (no JWT required)"
		},
		{
			"name": "User Management (Protected)",
			"item": [
				{
					"name": "Get Current User Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"description": "JWT access token"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"me"
							]
						},
						"description": "Get current user's profile information from JWT token"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"description": "JWT access token"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Get user information by user ID. Authorization: Users can only access their own data. Admins can access any user's data."
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"description": "JWT access token"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newemail@example.com\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Smith\",\n  \"phone_number\": \"+9876543210\",\n  \"push_notification_permission\": false,\n  \"role\": \"manager\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Update user information. All fields are optional. Role field must be one of: admin, user, manager, operator, analyst"
					},
					"response": []
				},
				{
					"name": "Change Password",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"description": "JWT access token"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"old_password\": \"Password123!\",\n  \"new_password\": \"NewPassword123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}/password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}",
								"password"
							]
						},
						"description": "Change user password"
					},
					"response": []
				},
				{
					"name": "Delete User",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"description": "JWT access token"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Delete user account. Authorization: Users can only delete their own account. Admins can delete any user."
					},
					"response": []
				},
				{
					"name": "Verify User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"token\": \"verification-token-from-email\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"verify"
							]
						},
						"description": "Verify user email with token from registration email"
					},
					"response": []
				}
			],
			"description": "User management endpoints. Authorization required. Role-based access control applies."
		},
		{
			"name": "Login History (Protected)",
			"item": [
				{
					"name": "Get User Login History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"description": "JWT access token"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}/login-history?limit=10&offset=0",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}",
								"login-history"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"description": "Number of records to return"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Number of records to skip"
								}
							]
						},
						"description": "Get paginated login history for a specific user"
					},
					"response": []
				},
				{
					"name": "Get Recent Login History",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"description": "JWT access token"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}/recent-logins",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}",
								"recent-logins"
							]
						},
						"description": "Get recent login history for a specific user (last 10 logins)"
					},
					"response": []
				},
				{
					"name": "Get Failed Login Attempts",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"description": "JWT access token"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{user_id}}/failed-attempts?since=2023-01-01T00:00:00Z",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{user_id}}",
								"failed-attempts"
							],
							"query": [
								{
									"key": "since",
									"value": "2023-01-01T00:00:00Z",
									"description": "Start time in ISO format"
								}
							]
						},
						"description": "Get failed login attempts for a specific user within a time window"
					},
					"response": []
				}
			],
			"description": "Login history endpoints (JWT authentication required)"
		},
		{
			"name": "Documentation",
			"item": [
				{
					"name": "Swagger UI",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/swagger/index.html",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"swagger",
								"index.html"
							]
						},
						"description": "Access Swagger UI documentation"
					},
					"response": []
				}
			],
			"description": "API documentation endpoints"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-extract access token from login response",
					"if (pm.response && pm.response.json && pm.response.json.access_token) {",
					"    pm.environment.set('access_token', pm.response.json.access_token);",
					"    pm.environment.set('user_id', pm.response.json.user.id);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"description": "Base URL for the API Gateway"
		},
		{
			"key": "access_token",
			"value": "",
			"description": "JWT access token (auto-populated from login response)"
		},
		{
			"key": "user_id",
			"value": "",
			"description": "User ID (auto-populated from login response)"
		}
	]
}