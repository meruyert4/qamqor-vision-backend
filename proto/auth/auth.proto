syntax = "proto3";

package auth.v1;

option go_package = "github.com/meruyert4/qamqor-vision-backend/proto/auth";

service AuthService {
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    rpc VerifyUser(VerifyUserRequest) returns (VerifyUserResponse);
    rpc ForgotPassword(ForgotPasswordRequest) returns (ForgotPasswordResponse);
    rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse);

    rpc GetUserLoginHistory(GetUserLoginHistoryRequest) returns (GetUserLoginHistoryResponse);
    rpc GetRecentLoginHistory(GetRecentLoginHistoryRequest) returns (GetRecentLoginHistoryResponse);
    rpc GetFailedLoginAttempts(GetFailedLoginAttemptsRequest) returns (GetFailedLoginAttemptsResponse);
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
}

message User {
    string id = 1;
    string email = 2;
    string first_name = 3;
    string last_name = 4;
    string phone_number = 5;
    bool push_notification_permission = 6;
    string role = 7;
    string created_at = 8;
}

// Create
message CreateUserRequest {
    string email = 1;
    string password = 2;
    string first_name = 3;
    string last_name = 4;
    optional string phone_number = 5;
    bool push_notification_permission = 6;
    optional string role = 7;
}

message CreateUserResponse {
    string message = 2;
}

// Login
message LoginRequest {
    string email = 1;
    string password = 2;
}

message LoginResponse {
    string access_token = 1;
    string refresh_token = 2;
    User user = 3;
}

// Get user
message GetUserRequest {
    string id = 1;
}

message GetUserResponse {
    User user = 1;
}

// Update
message UpdateUserRequest {
    string id = 1;
    optional string email = 2;
    optional string first_name = 3;
    optional string last_name = 4;
    optional string phone_number = 5;
    optional bool push_notification_permission = 6;
    optional string role = 7;
}

message UpdateUserResponse {
    User user = 1;
}

// Change password
message ChangePasswordRequest {
    string id = 1;
    string old_password = 2;
    string new_password = 3;
}

message ChangePasswordResponse {
    bool success = 1;
}

// Delete
message DeleteUserRequest {
    string id = 1;
}

message DeleteUserResponse {
    bool success = 1;
}

// Verify email
message VerifyUserRequest {
    string token = 1;
}

message VerifyUserResponse {
    bool success = 1;
}

// Forgot password
message ForgotPasswordRequest {
    string email = 1;
}

message ForgotPasswordResponse {
    bool success = 1;
}

// Reset password
message ResetPasswordRequest {
    string email = 1;
    string new_password = 2;
    string token = 3; // из письма
}

message ResetPasswordResponse {
    bool success = 1;
}

message UserLoginHistory {
    string id = 1;
    string user_id = 2;
    string ip_address = 3;
    string user_agent = 4;
    string login_status = 5;
    string failure_reason = 6;
    string created_at = 7;
}

message GetUserLoginHistoryRequest {
    string user_id = 1;
    int32 limit = 2;
    int32 offset = 3;
}

message GetUserLoginHistoryResponse {
    repeated UserLoginHistory login_history = 1;
}

message GetRecentLoginHistoryRequest {
    string user_id = 1;
}

message GetRecentLoginHistoryResponse { 
    repeated UserLoginHistory login_history = 1;
}

message GetFailedLoginAttemptsRequest {
    string user_id = 1;
    string since = 2; // ISO timestamp
}

message GetFailedLoginAttemptsResponse {
    repeated UserLoginHistory failed_attempts = 1;
}

// JWT Token Validation
message ValidateTokenRequest {
    string token = 1;
}

message ValidateTokenResponse {
    bool valid = 1;
    User user = 2;
}